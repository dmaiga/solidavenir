# Generated by Django 5.2.6 on 2025-09-26 09:09

import core.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sujet', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('message', models.TextField()),
                ('date_soumission', models.DateTimeField(default=django.utils.timezone.now)),
                ('traite', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Soumission de contact',
                'verbose_name_plural': 'Soumissions de contact',
                'ordering': ['-date_soumission'],
            },
        ),
        migrations.CreateModel(
            name='Palier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pourcentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('montant', models.DecimalField(decimal_places=0, max_digits=15)),
                ('montant_minimum', models.DecimalField(decimal_places=0, editable=False, max_digits=15)),
                ('transfere', models.BooleanField(default=False)),
                ('date_transfert', models.DateTimeField(blank=True, null=True)),
                ('transaction_hash', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'ordering': ['montant_minimum'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('admin', 'Administrateur'), ('porteur', 'Porteur de Projet'), ('donateur', 'Donateur/Philanthrope'), ('investisseur', 'Investisseur'), ('association', 'Association/ONG')], default='porteur', max_length=15)),
                ('type_financement', models.CharField(blank=True, choices=[('don', 'Don pur'), ('pret', 'Prêt'), ('equity', 'Investissement en equity'), ('mixte', 'Financement mixte'), ('autre', 'Autre type de financement')], max_length=10, null=True)),
                ('photo_profil', models.ImageField(blank=True, help_text='Photo de profil (format carré recommandé, max 5 Mo)', null=True, upload_to='profiles/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif']), core.models.validate_profile_image_size])),
                ('telephone', models.CharField(blank=True, max_length=20, null=True)),
                ('adresse', models.TextField(blank=True, null=True)),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('ville', models.CharField(blank=True, max_length=100, null=True)),
                ('code_postal', models.CharField(blank=True, max_length=10, null=True)),
                ('pays', models.CharField(blank=True, max_length=100, null=True)),
                ('genre', models.CharField(choices=[('homme', 'Homme'), ('femme', 'Femme'), ('autre', 'Autre'), ('non_specifie', 'Non spécifié')], default='non_specifie', max_length=15)),
                ('bio', models.TextField(blank=True, help_text='Une brève description de vous-même', null=True)),
                ('site_web_perso', models.URLField(blank=True, help_text='Votre site web personnel', null=True)),
                ('linkedin', models.URLField(blank=True, help_text='Votre profil LinkedIn', null=True)),
                ('twitter', models.URLField(blank=True, help_text='Votre profil Twitter', null=True)),
                ('facebook', models.URLField(blank=True, help_text='Votre profil Facebook', null=True)),
                ('hedera_account_id', models.CharField(blank=True, max_length=50, null=True)),
                ('hedera_private_key', models.TextField(blank=True, null=True)),
                ('hedera_public_key', models.TextField(blank=True, null=True)),
                ('audit_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('wallet_activated', models.BooleanField(default=False)),
                ('organisation', models.CharField(blank=True, help_text='Nom de votre entreprise, startup, ou structure', max_length=100, null=True)),
                ('site_web', models.URLField(blank=True, help_text='Site web de votre projet', null=True)),
                ('description_projet', models.TextField(blank=True, help_text='Décrivez brièvement votre projet', null=True)),
                ('montant_recherche', models.DecimalField(blank=True, decimal_places=2, help_text='Montant approximatif recherché', max_digits=15, null=True)),
                ('date_creation_profile', models.DateTimeField(auto_now_add=True)),
                ('nom_association', models.CharField(blank=True, max_length=200, null=True)),
                ('causes_defendues', models.TextField(blank=True, null=True)),
                ('domaine_action', models.CharField(blank=True, max_length=100, null=True)),
                ('date_creation_association', models.DateField(blank=True, null=True)),
                ('type_investisseur', models.CharField(blank=True, choices=[('', 'Non spécifié'), ('particulier', 'Particulier'), ('institutionnel', 'Institutionnel'), ('business_angel', 'Business Angel'), ('fond_investissement', "Fonds d'investissement"), ('autre', 'Autre')], max_length=50, null=True)),
                ('secteur_prefere', models.CharField(blank=True, max_length=100, null=True)),
                ('montant_investissement_min', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('montant_investissement_max', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('expectative_rendement', models.CharField(blank=True, max_length=100, null=True)),
                ('causes_soutenues', models.TextField(blank=True, null=True)),
                ('montant_don_moyen', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('frequence_dons', models.CharField(blank=True, choices=[('', 'Non spécifié'), ('ponctuel', 'Ponctuel'), ('mensuel', 'Mensuel'), ('trimestriel', 'Trimestriel'), ('annuel', 'Annuel')], max_length=50, null=True)),
                ('departement', models.CharField(blank=True, max_length=100, null=True)),
                ('role_admin', models.CharField(blank=True, max_length=100, null=True)),
                ('newsletter', models.BooleanField(default=True)),
                ('consentement_rgpd', models.BooleanField(default=True)),
                ('date_consentement', models.DateTimeField(blank=True, null=True)),
                ('date_inscription', models.DateTimeField(auto_now_add=True)),
                ('date_derniere_connexion', models.DateTimeField(blank=True, null=True)),
                ('email_verifie', models.BooleanField(default=False)),
                ('telephone_verifie', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-date_joined'],
                'permissions': [('can_audit', 'Peut effectuer des audits de transparence'), ('manage_users', 'Peut gérer tous les utilisateurs'), ('manage_projects', 'Peut gérer tous les projets'), ('manage_transactions', 'Peut gérer toutes les transactions'), ('view_dashboard', 'Peut voir le tableau de bord administrateur')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Association',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=200)),
                ('slogan', models.CharField(blank=True, max_length=250, null=True)),
                ('description_courte', models.TextField(blank=True, max_length=200, null=True)),
                ('description_longue', models.TextField(blank=True, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='associations/logos/')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='associations/covers/')),
                ('domaine_principal', models.CharField(choices=[('education', 'Éducation'), ('sante', 'Santé'), ('environnement', 'Environnement'), ('droits_humains', 'Droits humains'), ('developpement', 'Développement communautaire'), ('culture', 'Culture'), ('urgence', 'Aide humanitaire'), ('autre', 'Autre')], default='developpement', max_length=50)),
                ('domaines_secondaires', models.CharField(blank=True, help_text='Domaines secondaires (séparés par des virgules)', max_length=200, null=True)),
                ('causes_defendues', models.TextField(blank=True, null=True)),
                ('statut_juridique', models.CharField(choices=[('association', 'Association'), ('ong', 'ONG'), ('fondation', 'Fondation'), ('autre', 'Autre statut')], default='association', max_length=50)),
                ('numero_agrement', models.CharField(blank=True, max_length=100, null=True)),
                ('date_creation_association', models.DateField(blank=True, null=True)),
                ('date_agrement', models.DateField(blank=True, null=True)),
                ('adresse_siege', models.TextField(blank=True, null=True)),
                ('ville', models.CharField(blank=True, max_length=100, null=True)),
                ('code_postal', models.CharField(blank=True, max_length=10, null=True)),
                ('pays', models.CharField(blank=True, max_length=100, null=True)),
                ('telephone', models.CharField(blank=True, max_length=20, null=True)),
                ('email_contact', models.EmailField(blank=True, max_length=254, null=True)),
                ('site_web', models.URLField(blank=True, null=True)),
                ('facebook', models.URLField(blank=True, null=True)),
                ('twitter', models.URLField(blank=True, null=True)),
                ('instagram', models.URLField(blank=True, null=True)),
                ('linkedin', models.URLField(blank=True, null=True)),
                ('youtube', models.URLField(blank=True, null=True)),
                ('nombre_adherents', models.IntegerField(blank=True, help_text='Nombre approximatif d’adhérents', null=True)),
                ('nombre_beneficiaires', models.IntegerField(blank=True, help_text='Nombre approximatif de personnes aidées', null=True)),
                ('projets_phares', models.TextField(blank=True, help_text='Quelques-uns de vos projets importants', null=True)),
                ('actions_en_cours', models.TextField(blank=True, null=True)),
                ('partenariats', models.TextField(blank=True, null=True)),
                ('transparent_finances', models.BooleanField(default=False, help_text='Nous partageons nos informations financières')),
                ('transparent_actions', models.BooleanField(default=False, help_text='Nous rendons compte de nos actions')),
                ('date_creation', models.DateField(auto_now_add=True)),
                ('date_maj', models.DateTimeField(auto_now=True)),
                ('valide', models.BooleanField(default=False, help_text="Profil validé par l'administration")),
                ('featured', models.BooleanField(default=False, help_text='Mise en avant sur la plateforme')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='association_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Association',
                'verbose_name_plural': 'Associations',
            },
        ),
        migrations.CreateModel(
            name='AssociationImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Gallery image file uploaded by the association.', upload_to='associations/galerie/')),
                ('legende', models.CharField(blank=True, help_text='Optional caption or description for the image.', max_length=200, null=True)),
                ('date_ajout', models.DateTimeField(auto_now_add=True, help_text='Date and time when the image was uploaded.')),
                ('ordre', models.PositiveIntegerField(default=0, help_text='Display order of the image in the gallery.')),
                ('association', models.ForeignKey(help_text='The association this image belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='core.association')),
            ],
            options={
                'verbose_name': 'Association Image',
                'verbose_name_plural': 'Association Images',
                'ordering': ['ordre', 'date_ajout'],
            },
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('destinataire', models.EmailField(max_length=254, verbose_name='Destinataire')),
                ('sujet', models.CharField(max_length=200, verbose_name='Sujet')),
                ('corps', models.TextField(verbose_name='Corps du message')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_envoi', models.DateTimeField(blank=True, null=True, verbose_name="Date d'envoi")),
                ('statut', models.CharField(choices=[('sent', 'Envoyé'), ('failed', 'Échec'), ('simulated', 'Simulé'), ('pending', 'En attente')], default='pending', max_length=10, verbose_name='Statut')),
                ('type_email', models.CharField(choices=[('project_approved', 'Projet approuvé'), ('project_rejected', 'Projet rejeté'), ('don_received', 'Don reçu'), ('user_welcome', 'Bienvenue utilisateur'), ('password_reset', 'Réinitialisation mot de passe'), ('notification', 'Notification'), ('other', 'Autre')], default='other', max_length=20, verbose_name="Type d'email")),
                ('erreur', models.TextField(blank=True, verbose_name="Message d'erreur")),
                ('utilisateur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur concerné')),
            ],
            options={
                'verbose_name': "Log d'email",
                'verbose_name_plural': "Logs d'emails",
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='PreuvePalier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_soumission', models.DateTimeField(auto_now_add=True)),
                ('date_verification', models.DateTimeField(blank=True, null=True)),
                ('statut', models.CharField(choices=[('non_soumis', 'Not submitted'), ('en_attente', 'Pending verification'), ('approuve', 'Approved'), ('rejete', 'Rejected'), ('modification', 'Modification required')], default='non_soumis', max_length=20)),
                ('commentaires', models.TextField(blank=True)),
                ('palier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preuves', to='core.palier')),
                ('verificateur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preuves_verifiees', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Preuve de palier',
                'verbose_name_plural': 'Preuves de paliers',
                'ordering': ['-date_soumission'],
            },
        ),
        migrations.CreateModel(
            name='FichierPreuve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fichier', models.FileField(upload_to='preuves/%Y/%m/%d/')),
                ('type_fichier', models.CharField(choices=[('photo', 'Photo'), ('video', 'Vidéo'), ('document', 'Document'), ('autre', 'Autre')], max_length=20)),
                ('date_upload', models.DateTimeField(auto_now_add=True)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('preuve', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fichiers', to='core.preuvepalier')),
            ],
            options={
                'verbose_name': 'Fichier preuve',
                'verbose_name_plural': 'Fichiers preuves',
            },
        ),
        migrations.CreateModel(
            name='Projet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audit_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('titre', models.CharField(max_length=250)),
                ('slug', models.SlugField(blank=True, max_length=300, unique=True)),
                ('description', models.TextField()),
                ('description_courte', models.CharField(help_text='Description résumée pour les listes', max_length=300)),
                ('identifiant_unique', models.CharField(blank=True, help_text='Identifiant unique du projet, généré automatiquement', max_length=240, null=True, unique=True)),
                ('hedera_account_id', models.CharField(blank=True, max_length=100, null=True)),
                ('hedera_private_key', models.CharField(blank=True, max_length=500, null=True)),
                ('montant_engage', models.DecimalField(decimal_places=0, default=0, max_digits=15)),
                ('montant_distribue', models.DecimalField(decimal_places=0, default=0, max_digits=15)),
                ('montant_demande', models.DecimalField(decimal_places=0, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('montant_minimal', models.DecimalField(decimal_places=0, default=0, help_text='Montant minimum à atteindre pour que le projet soit financé', max_digits=15)),
                ('montant_collecte', models.DecimalField(decimal_places=0, default=0, max_digits=15)),
                ('type_financement', models.CharField(choices=[('don', 'Donations only'), ('pret', 'Loan with repayment'), ('equity', 'Equity investment'), ('recompense', 'Reward-based funding'), ('mixte', 'Mixed funding')], default='don', max_length=10)),
                ('wallet_configure', models.BooleanField(default=False, help_text='Indique si le wallet est configuré pour les transactions')),
                ('topic_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('hedera_topic_created', models.BooleanField(default=False, help_text='Indique si le topic HCS a été créé sur Hedera')),
                ('hedera_topic_transaction_id', models.CharField(blank=True, help_text='Transaction ID de création du topic HCS', max_length=150, null=True)),
                ('hedera_topic_hashscan_url', models.URLField(blank=True, help_text='URL HashScan pour le topic HCS', null=True)),
                ('cover_image', models.ImageField(blank=True, help_text='Image de couverture du projet (recommandé: 1200x600px)', null=True, upload_to='covers/projets/')),
                ('video_presentation', models.URLField(blank=True, help_text='Lien vers une vidéo de présentation', null=True)),
                ('date_debut', models.DateTimeField(blank=True, help_text='Date de début de la campagne de financement', null=True)),
                ('date_fin', models.DateTimeField(blank=True, help_text='Date de fin de la campagne de financement', null=True)),
                ('duree_campagne', models.PositiveIntegerField(default=30, help_text='Durée de la campagne en jours')),
                ('date_validation', models.DateTimeField(blank=True, null=True)),
                ('motif_rejet', models.TextField(blank=True, null=True)),
                ('vues', models.PositiveIntegerField(default=0)),
                ('contributeurs_count', models.PositiveIntegerField(default=0)),
                ('partages', models.PositiveIntegerField(default=0)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_mise_a_jour', models.DateTimeField(auto_now=True)),
                ('statut', models.CharField(choices=[('brouillon', 'Brouillon'), ('en_attente', 'En attente de validation'), ('actif', 'Actif - Campagne en cours'), ('suspendu', 'Suspendu temporairement'), ('termine', 'Terminé avec succès'), ('echec', 'Échec de la campagne'), ('annule', 'Annulé'), ('rejete', 'Rejeté')], default='en_attente', max_length=20)),
                ('categorie', models.CharField(choices=[('agriculture', 'Agriculture & Agribusiness'), ('artisanat', 'Crafts & Trades'), ('commerce', 'Commerce & Sales'), ('education', 'Education & Training'), ('sante', 'Health & Wellness'), ('technologie', 'Technology & Innovation'), ('energie', 'Energy & Environment'), ('tourisme', 'Tourism & Hospitality'), ('culture', 'Culture & Arts'), ('social', 'Social & Community'), ('sport', 'Sports & Leisure'), ('immobilier', 'Real Estate & Construction'), ('transport', 'Transport & Mobility'), ('finance', 'Finance & Microcredit'), ('autre', 'Other')], default='commerce', max_length=200, verbose_name='Catégorie du projet')),
                ('autre_categorie', models.CharField(blank=True, max_length=200, null=True, verbose_name='Autre catégorie (si autre est sélectionné)')),
                ('tags', models.CharField(blank=True, max_length=200, null=True)),
                ('document_justificatif', models.FileField(blank=True, null=True, upload_to='documents/projets/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'png']), core.models.validate_file_size])),
                ('plan_financement', models.FileField(blank=True, null=True, upload_to='documents/projets/', validators=[core.models.validate_file_size])),
                ('budget_detaille', models.FileField(blank=True, null=True, upload_to='documents/projets/', validators=[core.models.validate_file_size])),
                ('blockchain_tx_id', models.CharField(blank=True, max_length=250, null=True)),
                ('wallet_url', models.URLField(blank=True, help_text='URL vers la page de contribution sur le serveur Node.js', null=True)),
                ('has_recompenses', models.BooleanField(default=False)),
                ('recompenses_description', models.TextField(blank=True, help_text='Description des récompenses pour contributeurs', null=True)),
                ('commission', models.DecimalField(decimal_places=2, default=2, help_text='Pourcentage de commission retenue par la plateforme avant distribution au porteur', max_digits=5)),
                ('association', models.ForeignKey(blank=True, help_text='Association porteuse du projet', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projets', to='core.association')),
                ('porteur', models.ForeignKey(limit_choices_to={'user_type': 'porteur'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('valide_par', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'admin'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projets_valides', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_creation'],
                'permissions': [('validate_project', 'Peut valider un projet'), ('suspend_project', 'Peut suspendre un projet'), ('view_analytics', 'Peut voir les analytics des projets')],
            },
        ),
        migrations.AddField(
            model_name='palier',
            name='projet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paliers', to='core.projet'),
        ),
        migrations.CreateModel(
            name='TopicMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_message', models.CharField(max_length=100)),
                ('utilisateur_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('montant', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('transaction_hash', models.CharField(blank=True, max_length=200, null=True)),
                ('contenu', models.JSONField(default=dict)),
                ('date_envoi', models.DateTimeField(auto_now_add=True)),
                ('projet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.projet')),
            ],
            options={
                'ordering': ['-date_envoi'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('destination', models.CharField(choices=[('operator', 'Vers opérateur'), ('project', 'Vers projet direct'), ('beneficiary', 'Vers bénéficiaire')], default='operator', max_length=20)),
                ('audit_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('montant', models.DecimalField(decimal_places=0, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('date_transaction', models.DateTimeField(auto_now_add=True)),
                ('hedera_transaction_hash', models.CharField(max_length=150, unique=True)),
                ('hedera_hashscan_url', models.URLField(blank=True, help_text='URL HashScan pour visualiser la transaction', null=True)),
                ('hedera_status', models.CharField(blank=True, help_text='Statut Hedera de la transaction (SUCCESS, FAILED, etc.)', max_length=20, null=True)),
                ('hedera_message_hashscan_url', models.URLField(blank=True, help_text='URL HashScan pour le message HCS', null=True)),
                ('statut', models.CharField(choices=[('en_attente', 'En attente'), ('confirme', 'Confirmé'), ('erreur', 'Erreur'), ('rembourse', 'Remboursé')], default='en_attente', max_length=10)),
                ('contributeur_anonymise', models.CharField(editable=False, max_length=100)),
                ('date_verification', models.DateTimeField(blank=True, null=True)),
                ('notes_verification', models.TextField(blank=True, null=True)),
                ('contributeur', models.ForeignKey(limit_choices_to={'user_type__in': ['porteur', 'donateur', 'investisseur', 'association']}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('projet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.projet')),
                ('topic', models.ForeignKey(blank=True, help_text='Topic HCS du projet associé à cette transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions_by_topic', to='core.projet', to_field='topic_id')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to=settings.AUTH_USER_MODEL)),
                ('verifie_par', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'admin'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions_verifiees', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('verify_transaction', 'Peut vérifier une transaction'), ('refund_transaction', 'Peut rembourser une transaction')],
            },
        ),
        migrations.CreateModel(
            name='TransactionAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant_brut', models.DecimalField(decimal_places=2, max_digits=15)),
                ('montant_net', models.DecimalField(decimal_places=2, max_digits=15)),
                ('commission', models.DecimalField(decimal_places=2, max_digits=15)),
                ('commission_pourcentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('transaction_hash', models.CharField(max_length=100)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('hedera_message_id', models.CharField(blank=True, max_length=150, null=True)),
                ('hedera_message_hashscan_url', models.URLField(blank=True, null=True)),
                ('type_transaction', models.CharField(choices=[('distribution', 'Distribution'), ('commission', 'Commission')], max_length=20)),
                ('beneficiaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions_reçues', to=settings.AUTH_USER_MODEL)),
                ('initiateur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions_initiées', to=settings.AUTH_USER_MODEL)),
                ('palier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.palier')),
                ('projet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.projet')),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audit_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('action', models.CharField(choices=[('create', 'Création'), ('update', 'Modification'), ('delete', 'Suppression'), ('validate', 'Validation'), ('reject', 'Rejet'), ('verify', 'Vérification'), ('refund', 'Remboursement')], max_length=10)),
                ('modele', models.CharField(max_length=50)),
                ('objet_id', models.CharField(max_length=100)),
                ('details', models.JSONField()),
                ('date_action', models.DateTimeField(auto_now_add=True)),
                ('adresse_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('statut', models.CharField(choices=[('SUCCESS', 'Succès'), ('FAILURE', 'Échec')], default='SUCCESS', max_length=10)),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_action'],
                'indexes': [models.Index(fields=['date_action'], name='core_auditl_date_ac_9eda91_idx'), models.Index(fields=['utilisateur'], name='core_auditl_utilisa_81b441_idx'), models.Index(fields=['modele', 'objet_id'], name='core_auditl_modele_553dc6_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['audit_uuid'], name='core_projet_audit_u_073263_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['statut'], name='core_projet_statut_ed82ae_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['porteur'], name='core_projet_porteur_1be2be_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['date_fin'], name='core_projet_date_fi_5423e2_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['categorie'], name='core_projet_categor_81a315_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['montant_demande'], name='core_projet_montant_9b9b54_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['type_financement'], name='core_projet_type_fi_195bd7_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['hedera_transaction_hash'], name='core_transa_hedera__5524ff_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['date_transaction'], name='core_transa_date_tr_afcac9_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['contributeur'], name='core_transa_contrib_b08259_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['projet'], name='core_transa_projet__3a5ddd_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['topic'], name='core_transa_topic_i_e48799_idx'),
        ),
    ]
