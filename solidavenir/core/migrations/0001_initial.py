# Generated by Django 5.2.6 on 2025-09-12 04:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CategorieProjet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('icone', models.CharField(blank=True, help_text="Classe CSS pour l'icône", max_length=50)),
                ('ordre', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['ordre', 'nom'],
            },
        ),
        migrations.CreateModel(
            name='TagProjet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=50)),
                ('slug', models.SlugField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('admin', 'Administrateur'), ('porteur', 'Porteur de Projet'), ('donateur', 'Donateur/Philanthrope'), ('investisseur', 'Investisseur'), ('association', 'Association/ONG')], default='donateur', max_length=15)),
                ('type_financement', models.CharField(blank=True, choices=[('don', 'Don pur'), ('pret', 'Prêt'), ('equity', 'Investissement en equity'), ('mixte', 'Financement mixte'), ('autre', 'Autre type de financement')], max_length=10, null=True)),
                ('telephone', models.CharField(blank=True, max_length=20, null=True)),
                ('adresse', models.TextField(blank=True, null=True)),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('ville', models.CharField(blank=True, max_length=100, null=True)),
                ('code_postal', models.CharField(blank=True, max_length=10, null=True)),
                ('pays', models.CharField(blank=True, max_length=100, null=True)),
                ('hedera_account_id', models.CharField(blank=True, max_length=50, null=True)),
                ('hedera_private_key', models.BinaryField(blank=True, null=True)),
                ('audit_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('organisation', models.CharField(blank=True, help_text='Nom de votre entreprise, startup, ou structure', max_length=100, null=True)),
                ('site_web', models.URLField(blank=True, help_text='Site web de votre projet', null=True)),
                ('description_projet', models.TextField(blank=True, help_text='Décrivez brièvement votre projet', null=True)),
                ('montant_recherche', models.DecimalField(blank=True, decimal_places=2, help_text='Montant approximatif recherché', max_digits=15, null=True)),
                ('nom_association', models.CharField(blank=True, max_length=200, null=True)),
                ('causes_defendues', models.TextField(blank=True, null=True)),
                ('domaine_action', models.CharField(blank=True, max_length=100, null=True)),
                ('date_creation_association', models.DateField(blank=True, null=True)),
                ('type_investisseur', models.CharField(blank=True, choices=[('', 'Non spécifié'), ('particulier', 'Particulier'), ('institutionnel', 'Institutionnel'), ('business_angel', 'Business Angel'), ('fond_investissement', "Fonds d'investissement"), ('autre', 'Autre')], max_length=50, null=True)),
                ('secteur_prefere', models.CharField(blank=True, max_length=100, null=True)),
                ('montant_investissement_min', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('montant_investissement_max', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('expectative_rendement', models.CharField(blank=True, max_length=100, null=True)),
                ('causes_soutenues', models.TextField(blank=True, null=True)),
                ('montant_don_moyen', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('frequence_dons', models.CharField(blank=True, choices=[('', 'Non spécifié'), ('ponctuel', 'Ponctuel'), ('mensuel', 'Mensuel'), ('trimestriel', 'Trimestriel'), ('annuel', 'Annuel')], max_length=50, null=True)),
                ('departement', models.CharField(blank=True, max_length=100, null=True)),
                ('role_admin', models.CharField(blank=True, max_length=100, null=True)),
                ('newsletter', models.BooleanField(default=True)),
                ('consentement_rgpd', models.BooleanField(default=True)),
                ('date_consentement', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': [('can_audit', 'Peut effectuer des audits de transparence'), ('manage_users', 'Peut gérer tous les utilisateurs'), ('manage_projects', 'Peut gérer tous les projets'), ('manage_transactions', 'Peut gérer toutes les transactions'), ('view_dashboard', 'Peut voir le tableau de bord administrateur')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Projet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audit_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('titre', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('description', models.TextField()),
                ('description_courte', models.CharField(help_text='Description résumée pour les listes', max_length=300)),
                ('montant_demande', models.DecimalField(decimal_places=0, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('montant_minimal', models.DecimalField(decimal_places=0, default=0, help_text='Montant minimum à atteindre pour que le projet soit financé', max_digits=15)),
                ('montant_collecte', models.DecimalField(decimal_places=0, default=0, max_digits=15)),
                ('type_financement', models.CharField(choices=[('don', 'Dons uniquement'), ('pret', 'Prêt avec remboursement'), ('equity', 'Investissement en equity'), ('recompense', 'Financement avec récompenses'), ('mixte', 'Financement mixte')], default='don', max_length=10)),
                ('cover_image', models.ImageField(blank=True, help_text='Image de couverture du projet (recommandé: 1200x600px)', null=True, upload_to='covers/projets/')),
                ('video_presentation', models.URLField(blank=True, help_text='Lien vers une vidéo de présentation', null=True)),
                ('date_debut', models.DateTimeField(blank=True, help_text='Date de début de la campagne de financement', null=True)),
                ('date_fin', models.DateTimeField(blank=True, help_text='Date de fin de la campagne de financement', null=True)),
                ('duree_campagne', models.PositiveIntegerField(default=30, help_text='Durée de la campagne en jours')),
                ('date_validation', models.DateTimeField(blank=True, null=True)),
                ('vues', models.PositiveIntegerField(default=0)),
                ('contributeurs_count', models.PositiveIntegerField(default=0)),
                ('partages', models.PositiveIntegerField(default=0)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_mise_a_jour', models.DateTimeField(auto_now=True)),
                ('statut', models.CharField(choices=[('brouillon', 'Brouillon'), ('en_attente', 'En attente de validation'), ('actif', 'Actif - Campagne en cours'), ('suspendu', 'Suspendu temporairement'), ('termine', 'Terminé avec succès'), ('echec', 'Échec de la campagne'), ('annule', 'Annulé'), ('rejete', 'Rejeté')], default='brouillon', max_length=10)),
                ('document_justificatif', models.FileField(blank=True, null=True, upload_to='documents/projets/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'png'])])),
                ('plan_financement', models.FileField(blank=True, null=True, upload_to='documents/projets/')),
                ('budget_detaille', models.FileField(blank=True, null=True, upload_to='documents/projets/')),
                ('hedera_topic_id', models.CharField(blank=True, max_length=150, null=True)),
                ('transactions_hash', models.TextField(blank=True, null=True)),
                ('has_recompenses', models.BooleanField(default=False)),
                ('categorie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.categorieprojet')),
                ('porteur', models.ForeignKey(limit_choices_to={'user_type': 'porteur'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('valide_par', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'admin'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projets_valides', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_creation'],
                'permissions': [('validate_project', 'Peut valider un projet'), ('suspend_project', 'Peut suspendre un projet'), ('view_analytics', 'Peut voir les analytics des projets')],
            },
        ),
        migrations.CreateModel(
            name='NiveauFinancement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant', models.DecimalField(decimal_places=2, max_digits=10)),
                ('titre', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('livraison_estimee', models.DateField(blank=True, null=True)),
                ('quantite_limitee', models.PositiveIntegerField(blank=True, null=True)),
                ('quantite_vendue', models.PositiveIntegerField(default=0)),
                ('actif', models.BooleanField(default=True)),
                ('projet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='niveaux_financement', to='core.projet')),
            ],
            options={
                'ordering': ['montant'],
            },
        ),
        migrations.CreateModel(
            name='ProjetImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='projets/gallery/')),
                ('legende', models.CharField(blank=True, max_length=200)),
                ('ordre', models.PositiveIntegerField(default=0)),
                ('date_ajout', models.DateTimeField(auto_now_add=True)),
                ('projet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='core.projet')),
            ],
            options={
                'ordering': ['ordre', 'date_ajout'],
            },
        ),
        migrations.AddField(
            model_name='projet',
            name='gallery_images',
            field=models.ManyToManyField(blank=True, related_name='projet_gallery', to='core.projetimage'),
        ),
        migrations.AddField(
            model_name='projet',
            name='tags',
            field=models.ManyToManyField(blank=True, to='core.tagprojet'),
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audit_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('montant', models.DecimalField(decimal_places=0, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('date_transaction', models.DateTimeField(auto_now_add=True)),
                ('hedera_transaction_hash', models.CharField(max_length=150, unique=True)),
                ('statut', models.CharField(choices=[('en_attente', 'En attente'), ('confirme', 'Confirmé'), ('erreur', 'Erreur'), ('rembourse', 'Remboursé')], default='en_attente', max_length=10)),
                ('donateur_anonymise', models.CharField(editable=False, max_length=100)),
                ('date_verification', models.DateTimeField(blank=True, null=True)),
                ('notes_verification', models.TextField(blank=True, null=True)),
                ('donateur', models.ForeignKey(limit_choices_to={'user_type': 'donateur'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('projet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.projet')),
                ('verifie_par', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'admin'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions_verifiees', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('verify_transaction', 'Peut vérifier une transaction'), ('refund_transaction', 'Peut rembourser une transaction')],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audit_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('action', models.CharField(choices=[('create', 'Création'), ('update', 'Modification'), ('delete', 'Suppression'), ('validate', 'Validation'), ('reject', 'Rejet'), ('verify', 'Vérification'), ('refund', 'Remboursement')], max_length=10)),
                ('modele', models.CharField(max_length=50)),
                ('objet_id', models.CharField(max_length=100)),
                ('details', models.JSONField()),
                ('date_action', models.DateTimeField(auto_now_add=True)),
                ('adresse_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_action'],
                'indexes': [models.Index(fields=['date_action'], name='core_auditl_date_ac_9eda91_idx'), models.Index(fields=['utilisateur'], name='core_auditl_utilisa_81b441_idx'), models.Index(fields=['modele', 'objet_id'], name='core_auditl_modele_553dc6_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['audit_uuid'], name='core_projet_audit_u_073263_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['statut'], name='core_projet_statut_ed82ae_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['porteur'], name='core_projet_porteur_1be2be_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['date_fin'], name='core_projet_date_fi_5423e2_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['categorie'], name='core_projet_categor_b4078c_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['montant_demande'], name='core_projet_montant_9b9b54_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['type_financement'], name='core_projet_type_fi_195bd7_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['hedera_transaction_hash'], name='core_transa_hedera__5524ff_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['date_transaction'], name='core_transa_date_tr_afcac9_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['donateur'], name='core_transa_donateu_ddc028_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['projet'], name='core_transa_projet__3a5ddd_idx'),
        ),
    ]
