# Generated by Django 5.2.5 on 2025-09-11 01:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('admin', 'Administrateur'), ('porteur', 'Porteur de Projet'), ('donateur', 'Donateur')], default='donateur', max_length=10)),
                ('hedera_account_id', models.CharField(blank=True, max_length=50, null=True)),
                ('hedera_private_key', models.BinaryField(blank=True, null=True)),
                ('audit_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('telephone', models.CharField(blank=True, max_length=20, null=True)),
                ('adresse', models.TextField(blank=True, null=True)),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('organisation', models.CharField(blank=True, max_length=100, null=True)),
                ('site_web', models.URLField(blank=True, null=True)),
                ('departement', models.CharField(blank=True, max_length=100, null=True)),
                ('role_admin', models.CharField(blank=True, max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': [('can_audit', 'Peut effectuer des audits de transparence'), ('manage_users', 'Peut gérer tous les utilisateurs'), ('manage_projects', 'Peut gérer tous les projets'), ('manage_transactions', 'Peut gérer toutes les transactions'), ('view_dashboard', 'Peut voir le tableau de bord administrateur')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Projet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audit_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('titre', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('montant_demande', models.DecimalField(decimal_places=0, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('montant_collecte', models.DecimalField(decimal_places=0, default=0, max_digits=15)),
                ('date_validation', models.DateTimeField(blank=True, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_mise_a_jour', models.DateTimeField(auto_now=True)),
                ('statut', models.CharField(choices=[('brouillon', 'Brouillon'), ('en_attente', 'En attente de validation'), ('actif', 'Actif'), ('termine', 'Terminé'), ('annule', 'Annulé'), ('rejete', 'Rejeté')], default='brouillon', max_length=10)),
                ('document_justificatif', models.FileField(blank=True, null=True, upload_to='documents/projets/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'png'])])),
                ('plan_financement', models.FileField(blank=True, null=True, upload_to='documents/projets/')),
                ('hedera_topic_id', models.CharField(blank=True, max_length=150, null=True)),
                ('porteur', models.ForeignKey(limit_choices_to={'user_type': 'porteur'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('valide_par', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'admin'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projets_valides', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('validate_project', 'Peut valider un projet')],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audit_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('montant', models.DecimalField(decimal_places=0, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('date_transaction', models.DateTimeField(auto_now_add=True)),
                ('hedera_transaction_hash', models.CharField(max_length=150, unique=True)),
                ('statut', models.CharField(choices=[('en_attente', 'En attente'), ('confirme', 'Confirmé'), ('erreur', 'Erreur'), ('rembourse', 'Remboursé')], default='en_attente', max_length=10)),
                ('donateur_anonymise', models.CharField(editable=False, max_length=100)),
                ('date_verification', models.DateTimeField(blank=True, null=True)),
                ('notes_verification', models.TextField(blank=True, null=True)),
                ('donateur', models.ForeignKey(limit_choices_to={'user_type': 'donateur'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('projet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.projet')),
                ('verifie_par', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'admin'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions_verifiees', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('verify_transaction', 'Peut vérifier une transaction'), ('refund_transaction', 'Peut rembourser une transaction')],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audit_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('action', models.CharField(choices=[('create', 'Création'), ('update', 'Modification'), ('delete', 'Suppression'), ('validate', 'Validation'), ('reject', 'Rejet'), ('verify', 'Vérification'), ('refund', 'Remboursement')], max_length=10)),
                ('modele', models.CharField(max_length=50)),
                ('objet_id', models.CharField(max_length=100)),
                ('details', models.JSONField()),
                ('date_action', models.DateTimeField(auto_now_add=True)),
                ('adresse_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_action'],
                'indexes': [models.Index(fields=['date_action'], name='core_auditl_date_ac_9eda91_idx'), models.Index(fields=['utilisateur'], name='core_auditl_utilisa_81b441_idx'), models.Index(fields=['modele', 'objet_id'], name='core_auditl_modele_553dc6_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['audit_uuid'], name='core_projet_audit_u_073263_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['statut'], name='core_projet_statut_ed82ae_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['porteur'], name='core_projet_porteur_1be2be_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['hedera_transaction_hash'], name='core_transa_hedera__5524ff_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['date_transaction'], name='core_transa_date_tr_afcac9_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['donateur'], name='core_transa_donateu_ddc028_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['projet'], name='core_transa_projet__3a5ddd_idx'),
        ),
    ]
